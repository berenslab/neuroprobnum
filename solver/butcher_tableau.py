from matplotlib import pyplot as plt
import numpy as np
from scipy.integrate import RK23, RK45

# E = Bstar - B, Bstar = E + B 

class ButcherTableau():    

    ###########################################################################
    def __init__(self, method):
        
        """Create Butcher Tableau for method.
        method (str) : keyword for method, e.g. RK45"""
        
        self.method = method

        # Set RK type.
        if method == 'FE':
        # Solution: Forward/Explicit Euler (1st)
        # Error: Heun (2nd)
        # https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Embedded_methods
            
            self.C = np.array([0])
            self.A = np.array([[0]])
            self.B = np.array([1])
            self.Bstar = np.array([0.5, 0.5])
            self.E = np.array([-0.5, 0.5])
            self.P = np.array([[1.]])
            self.n_stages = 2
            self.err_ex = -1 / 2
            self.order_B = 1
            self.order_Bstar = 2
            
        elif method in 'HN':
        # Solution: Heun (2nd)
        # Error: Forward/Explicit Euler (1st)
        # https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Embedded_methods

            self.C = np.array([0, 1])
            self.A = np.array([[0, 0], [1, 0]])
            self.B = np.array([0.5, 0.5])
            self.Bstar = np.array([1, 0])
            self.E = np.array([0.5, -0.5])
            self.P = np.array([[1, -0.5], [0, 0.5]])
            self.n_stages = 2
            self.err_ex = -1 / 2
            self.order_B = 2
            self.order_Bstar = 1

        elif method == 'RKBS':
        # Third order solution, second order error estimate.
        # https://en.wikipedia.org/wiki/Bogacki%E2%80%93Shampine_method

            rk = RK23(fun=lambda t, y: 0, t0=0, y0=np.array([0]), t_bound=0)
            
            self.C = rk.C
            self.A = rk.A
            self.B = rk.B # 3rd order
            self.E = rk.E
            self.P = rk.P
            self.Bstar = np.array([7/24, 1/4, 1/3, 1/8]) # 2nd order
            self.n_stages = 4
            self.err_ex = -1 / 3
            self.order_B = 3
            self.order_Bstar = 2
            
        elif method == 'RKCK':
        # Fourth order solution, fifth order error estimate. 
        # https://en.wikipedia.org/wiki/Cash%E2%80%93Karp_method
            
            self.C = np.array([0, 1/5, 3/10, 3/5, 1, 7/8])
            self.A = np.array([
                [0, 0, 0, 0, 0], 
                [1/5, 0, 0, 0, 0], 
                [3/40, 9/40, 0, 0, 0], 
                [3/10, -9/10, 6/5, 0, 0], 
                [-11/54, 5/2, -70/27, 35/27, 0], 
                [1631/55296, 175/512, 575/13824, 44275/110592, 253/4096], 
            ])
            self.B = np.array([2825/27648, 0, 18575/48384, 13525/55296, 277/14336, 1/4]) # 4th
            self.Bstar = np.array([37/378, 0, 250/621, 125/594, 0, 512/1771]) # 5th
            self.E = None
            self.n_stages = 6
            self.err_ex = -1 / 4
            self.order_B = 4
            self.order_Bstar = 5

        elif method == 'RKDP':
        # Fifth order solution, fourth order error estimate. 
        # https://en.wikipedia.org/wiki/Dormand%E2%80%93Prince_method
            
            rk = RK45(fun=lambda t, y: 0, t0=0, y0=np.array([0]), t_bound=0)
            
            self.C = rk.C
            self.A = rk.A
            self.B = rk.B
            self.E = rk.E
            self.P = rk.P
            self.Bstar = np.array([5179/57600, 0, 7571/16695, 393/640, -92097/339200, 187/2100, 1/40])
            self.n_stages = 7
            self.err_ex = -1 / 5
            self.order_B = 5
            self.order_Bstar = 4
        
        elif method in ['RK10']:      
        # https://www.minet.uni-jena.de/preprints/kaiser_13/Dieter%20Kaiser%202013.pdf
        # http://www.peterstone.name/Maplepgs/Maple/nmthds/RKcoeff/Runge_Kutta_schemes/RK10/RKcoeff10a(8)_2.pdf
            # Set C.
            C = np.zeros(22)
            C[2]  = .1452518960316150517617548528770033320314511251329947060838468741983976455607179673401
            C[3]  = .1452518960316150517617548528770033320314511251329947060838468741983976455607179673401
            C[4]  = .2178778440474225776426322793155049980471766876994920591257703112975964683410769510101
            C[5]  = .5446946101185564441065806982887624951179417192487301478144257782439911708526923775252
            C[6]  = .6536335321422677329278968379465149941415300630984761773773109338927894050232308530303
            C[7]  = .2746594919905254008808021630247618520892150865127407293922085868737635475402543533498
            C[8]  = .7735775201106609448405825008093973718589542913426807556412662673054607938029043386501
            C[9]  = .5801831400829957086304368756070480288942157185070105667309497004790955953521782539876
            C[10] = .1174723380352676535744985130203309248171321557319478803362088220814723414805867429383
            C[11] = .3573842417596774518429245029795604640404982636367873040901247917361510345429002009092
            C[12] = .6426157582403225481570754970204395359595017363632126959098752082638489654570997990908
            C[13] = .1174723380352676535744985130203309248171321557319478803362088220814723414805867429383
            C[14] = .8825276619647323464255014869796690751828678442680521196637911779185276585194132570617
            C[15] = .3573842417596774518429245029795604640404982636367873040901247917361510345429002009092
            C[16] = .6426157582403225481570754970204395359595017363632126959098752082638489654570997990908
            C[17] = .8825276619647323464255014869796690751828678442680521196637911779185276585194132570617
            C[18] = 1.
            C[19] = .3510848126232741617357001972386587771203155818540433925049309664694280078895463510848
            C[20] = .6157407407407407407407407407407407407407407407407407407407407407407407407407407407407
            C[21] = 1.
            self.C = C[1:]
        
            # Set A.
            A = np.zeros((22,22))
            A[2,1]=.1452518960316150517617548528770033320314511251329947060838468741983976455607179673401
            A[3,1]=.7262594801580752588087742643850166601572556256649735304192343709919882278035898367003e-1
            A[3,2]=.7262594801580752588087742643850166601572556256649735304192343709919882278035898367003e-1
            A[4,1]=.5446946101185564441065806982887624951179417192487301478144257782439911708526923775252e-1
            A[4,3]=.1634083830355669332319742094866287485353825157746190443443277334731973512558077132576
            A[5,1]=.5446946101185564441065806982887624951179417192487301478144257782439911708526923775252
            A[5,3]=-2.042604787944586665399677618582859356692281447182738054304096668414966890697596415720
            A[5,4]=2.042604787944586665399677618582859356692281447182738054304096668414966890697596415720
            A[6,1]=.6536335321422677329278968379465149941415300630984761773773109338927894050232308530303e-1
            A[6,4]=.3268167660711338664639484189732574970707650315492380886886554669463947025116154265151
            A[6,5]=.2614534128569070931711587351786059976566120252393904709509243735571157620092923412121
            A[7,1]=.8233707757482716585173454344310125296066814318521742241762319051772963627695955263034e-1
            A[7,4]=.2119171963202803561687843468555305553175658807629274312902985594840086570224567152664
            A[7,5]=-.3997343508054218311577932550061320162379840049816347807630118786107674477850206579628e-1
            A[7,6]=.2037865317596006197606259822674324543477946306275935376058802473310199901934015124941e-1
            A[8,1]=.8595305779007343831562027786771081909543936570474230618236291858949564375587825985001e-1
            A[8,6]=.2911769478058850960337179621761553399856026049598393013981874594942289837064329700000
            A[8,7]=.3964475145147024104912442607655312127779123206780991480607158892217361663405931088001
            A[9,1]=.8612093485606967549983047372292119178898514571588438099912534616486575243508895957628e-1
            A[9,6]=.1397464826824442089036313891001189801074425314582326737716288563521183595455090268480
            A[9,7]=.3951098495815674599900526056001284215294125840404176924334653987770478924197803010468
            A[9,8]=-.4079412703708563576307759281612056453162454270752418047326990081493640904820003348350e-1
            A[10,1]=.7233144422337948077616348229119326315582930871089020733092900891206129381937795204778e-1
            A[10,6]=.2200276284689998102140972735735070061373242800181187459951219347361114857342828430157
            A[10,7]=.8789533425436734013369780264792573637952226487753296416823846876217040795688489371334e-1
            A[10,8]=-.4445383996260350863990674880611108986832860648196030000580004690002268108984238641730e-1
            A[10,9]=-.2183282289488754689095532966861839909872150913926337371522805434288481649401165594213
            A[11,1]=.8947100936731114228785441966773836169071038390882857211057269158522704971585365845223e-1
            A[11,6]=.3946008170285561860741397654755022300929434262701385530048127140223687993778661654316
            A[11,7]=.3443011367963333487713764986067104675654371857504670290688086760696354596195596354011
            A[11,8]=-.7946682664292661290694938113119430997053815140863772328764150866582492425892231395780e-1
            A[11,9]=-.3915218947895966123834967996391962853380545808840091268064277812752553499114569444180
            A[12,1]=.3210006877963209212945282736072241886741425314298532400216927262619488479186214523312e-1
            A[12,8]=-.1846375997512050141835163881753227910996323204749769226655464078048769505209525299752e-3
            A[12,9]=.1560894025313219860759149162557283383430181475726228517203663063649626288079337909898
            A[12,10]=.1934496857654560252749984220385188727138526287670744309970093278715606577140084022992
            A[12,11]=.2611612387636636496908928477536452288263163392010050661129958478089356710938164130987
            A[13,1]=.4423749328524996327035388417792688154433173133294892285295756457561276315648477233732e-1
            A[13,8]=.4640774434539039636406222168781981616534115643208114455689698789119941732444857047798e-2
            A[13,9]=.4704660282615136532130927218172390570903230981414159347904277946537920001824903276586e-1
            A[13,10]=.8620749948011488160369445167416002799205317397013619044391270706339561700281526529703e-1
            A[13,11]=-.2607983024682138093233254079066687623148682426317395111719299641390118652802949600035e-1
            A[13,12]=-.3858020174396621532493277639159499581333235076531298977820093139813399390137768850940e-1
            A[14,1]=.2318046717429411567006043539613275607940758021709332569729352990777336390158311630529e-1
            A[14,8]=.3197856784116367067302124322582100058864027838197120089129330601737324659881765852593
            A[14,9]=.5933233331841898686063939886797828376866051205773280426848164018120869674204443797948
            A[14,10]=-1.937519548878479314706815782408229952008442222624773168771865465659822020582450444783
            A[14,11]=.1803950557030502357344063195737827904476240180662764468232042537858892203518134072359
            A[14,12]=-.4554014298857220726863505256926549022316460712353658688873150702827663762861750674926
            A[14,13]=2.158764106255762807077594619172645539322916635447781333204724468181634037726021280742
            A[15,1]=.2624364325798105891527733985858552391723553030719144065844544880498188553839263944447e-1
            A[15,8]=.4863139423867266106526843913609225996253073727381961544415263239431571586043622332760e-1
            A[15,9]=.4274382538346478867636942429421724367591866585774144180215122660980822123988151132213e-1
            A[15,10]=-.4862259869465547771298976981868643277396586803130813159599600102115609499827986711663
            A[15,11]=.1326047194917652331781527125743684254490968718259563958293167893998110899691451568372
            A[15,12]=-.9402962152946515651634831658142934852383791641671387741034606371378082209616938685225e-1
            A[15,13]=.6993864679941022534190304512277131176659196396138275832136258135631963192299339871223
            A[15,14]=-.1197020013028860976492784934312243036670658451195397948726104511062042521592125912599e-1
            A[16,1]=.5568066641536216461090823068917803436066365804361903532125349474551476120813558125830e-1
            A[16,8]=-.4324853319508358432896036654421685136736530810118924113940744870078036705505610668088
            A[16,9]=-.9979726994172038714656907882931844552238093285811791155499130927685987422432191170216
            A[16,10]=2.707893755718926115778725270396739994070337972517006747100005607751792006959604868323
            A[16,11]=-1.024823023512132929313567156576969954855232272749038347671818195935585095295127839150
            A[16,12]=1.334565206642246959252239602313589265188981560552694580059808406200559397799055652161
            A[16,13]=-2.587748998830690939658228913150922979184368065866213469477796089200252812362701917187
            A[16,14]=.8992773696348355846430438306111181223414632598285854300924423251352733205187087732678e-1
            A[16,15]=1.497578446211167333777988534023066333042434967475357134513165331964695787890042760189
            A[17,1]=-.8434891199686377639125188391985671318383858641413517143104162188088468627447515172982e-3
            A[17,8]=.7602144218856081893754106886111596435015500427480120290148318740899211421773423234728
            A[17,9]=1.769083927820959377467464871522349066447068428702073590698445112684989184432409492025
            A[17,10]=-4.499239797622297101452915424261016593995695456495268863455643396071539024609271033574
            A[17,11]=1.490558190212043468817221563278239942209691100326719140478588601720867838040211450448
            A[17,12]=-2.552203480132132516997563217309689292804518121743365818482497611667126218719069737195
            A[17,13]=4.795167551528575994217413424533259845001657006088189480440731104737960266616292993321
            A[17,14]=-.9161854401769482236671414092387917470686251714192236693920061138984202381209109248553e-1
            A[17,15]=-1.525735678746850818217653470352135651821164556169070505816135230784807058389577753184
            A[17,16]=.7371445601564892133467497107205798584829803038168267854389817508169123996459113657504
            A[18,1]=.1017366974111576638766809656369828971944080018220332809259398740674738807023371082700
            A[18,8]=-1.696217553209432810711666838709742166182992092906177246174096517233561845662947862824
            A[18,9]=-3.825235846211624254528740857512255693551264719132875740261231165548583482101116676418
            A[18,10]=9.754768979885866648856431516333641627109105703674164986615824197909762854575668793816
            A[18,11]=-2.520767789227152291196336314591227486393143379933686189126240710041836742414125694941
            A[18,12]=5.472417145227780046950992000565734793413395536531652419585004300790370984185945495978
            A[18,13]=-9.781098113458736121002383874108051372067873053264954833376114258940736444388841687929
            A[18,14]=.3189152692455334369024560213486753019540464785641163242047782111839399471147176681561
            A[18,15]=3.447227036527756718156475010324322155277035924051392880570525223655410460762027138915
            A[18,16]=-.6051983612219277832241707671295607127814820499715293613761402732652780120810041653591
            A[18,17]=.3334525350307787459202631378414806560287636505658634784117511174230383993073398823363
            A[19,1]=-.1012987737478284424676828232882617689682012456457322189102956361570156443805900941944
            A[19,6]=-.2409389328948775401304659380663043147167897928467308244359962659633933617326533285822e-1
            A[19,7]=-.6679880790275182076676283582867036095782150170801495251932447614617249253864579543857
            A[19,8]=1.600262798493100648047998296908183265688507618079976446601985464092263571149154964705
            A[19,9]=3.706958893826695766827011000213884379914407774639901049574259778345288538246990591819
            A[19,10]=-8.581755560147929325446798534254342948628755672447282004336563881429983605741487870996
            A[19,11]=.5607314974300953986559644699099897253584501767603091982484141468619493221310582281877e-1
            A[19,12]=-4.547761497422899514520768375507009011918601407646237921467449197008085790456674001879
            A[19,13]=9.255775439941294621826928846245618922061242300726600002589630404152665447900428712156
            A[19,14]=-.3450876657451631707159097079770789925142348071643902737346329921538351794816584861003
            A[20,1]=.3826909723812638609001259641818040193828105314579492422836388985468479567237561247336e-1
            A[20,6]=.7786978965202527814624406274393101840018332461648638653990700950184871893714491273096
            A[20,7]=.4859454140913448249612202172501868752761599132465501266008866131088163955018926230543
            A[20,8]=1.814925350154666364151014269029611427420766367555858499108920245656959783343309816408
            A[20,9]=4.551165245704657956889158854062833952834232753889932986749613143631480116805870313264
            A[20,10]=-7.173770670344544101351160462586215092596352548535380880420409450623251883641801862305
            A[20,11]=-.3943009017000923237232456850787591816773705728833192412204243696911216045268772747196
            A[20,12]=-6.036544185898100312430357626685382432626027303329497026597513524312479466987506315664
            A[20,13]=7.338904299721887701527380004651998686389416058019429466200740313593568240326087171554
            A[20,14]=-.4143158595971836110248598960027762194900538872022960061452263646470675916118824501965
            A[20,19]=-.3732349451502749258108621577582478607301443393311959731632798508493352335121760204375
            A[21,1]=.2162339046022045866878628785550588026780578552494608097931198882276791962912244674840e-1
            A[21,6]=.4611834700744369218866370212060318930941322187829670117414118166503940620998117275429
            A[21,7]=.1940797759547798743610542713744618433967649025379792966207862125676964319674160574624
            A[21,8]=.7041001229739959807963554405302474570280838416767002383409508232534658577705201658489
            A[21,9]=2.877431096792763528910415905652149398266490601780194388811216042455337979365709745445
            A[21,11]=-.4332742088749107411735902392606181444105337491234912425673655059805456011404518143074
            A[21,12]=-2.234178753588834452567105459024473991729105867012210449973082203886376638514123583334
            A[21,13]=.2235678086885984010238782832657956960650576194069632574873732156942360146780276407657
            A[21,14]=.1293532338308457711442786069651741293532338308457711442786069651741293532338308457711
            A[21,19]=.1418136968194278394808045812385429206355105705182818920178205766092934777719870449624
            A[21,20]=-1.085699633131323582531514699802817081967439754938101617737029931360398856861850276906
            self.A = A[1:,1:]
        
            # Set B.
            B = np.zeros(22)
            B[1]=.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333e-1
            B[12]=.1387145942588715882541801312803271702142521598590204181697361204933422401935856968980
            B[13]=.1892374781489234901583064041060123262381623469486258303271944256799821862794952728707
            B[14]=.9461873907446174507915320205300616311908117347431291516359721283999109313974763643533e-1
            B[15]=.2774291885177431765083602625606543404285043197180408363394722409866844803871713937960
            B[16]=.1387145942588715882541801312803271702142521598590204181697361204933422401935856968980
            B[17]=.9461873907446174507915320205300616311908117347431291516359721283999109313974763643533e-1
            B[18]=.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333e-1
            self.B = B[1:]
            
            # Set Bstar.
            Bstar = np.zeros(22)
            Bstar[1]=.3339829895931337572271945815422988633728883413227543303554098429202731077409488318421e-1
            Bstar[9]=.5024509803921568627450980392156862745098039215686274509803921568627450980392156862745e-1
            Bstar[10]=-.1423859191318858946753152353981644782061337055184060977838998119673893661279423564924
            Bstar[11]=.2126013199429258434998789109063801828540550730541648287733608913970804891935883227446
            Bstar[12]=.3254854965632843133622967470840062095221514741629108993207015882688341071771214986692
            Bstar[13]=.3312629399585921325051759834368530020703933747412008281573498964803312629399585921325
            Bstar[14]=.1887845809230650005639203350759631573314744764356665687950807917985316096487827551997
            Bstar[19]=.6159811094287144604404508847679200761569154839698701533406779753675999506388462962070e-1
            Bstar[20]=-.9440109660594088037957791636147830082275023098021053120999763935859315478744850552959e-1
            Bstar[21]=.3341117040855897708234682470384970584684876341854831047975628586614323631403861184369e-1
            self.Bstar = Bstar[1:]
        
            self.E = None
        
            self.n_stages = 21
            self.err_ex = -1 / 8
            self.order_B = 10
            self.order_Bstar = 8

        else:
            raise NotImplementedError(method)

        self.complete_E_and_Bstar()

    ###########################################################################
    def complete_E_and_Bstar(self):
        """If Bstar is given, either check given E or compute new E.
        If E is given and not Bstar, compute Bstar.
        E = Bstar - B, Bstar = E + B"""
        
        if (self.Bstar is not None):
            Bstar_ = np.pad(self.Bstar, (0,np.max([self.Bstar.size, self.B.size]) - self.Bstar.size))
            B_  = np.pad(self.B, (0,np.max([self.Bstar.size, self.B.size]) - self.B.size))
            if (self.E is not None): assert np.allclose(self.E, (Bstar_ - B_))
            else: self.E = Bstar_ - B_
            
        # E given but not Bstar. Compute Bstar from E and B.
        elif (self.E is not None):
            E_ = np.pad(self.E, (0,np.max([self.E.size, self.B.size]) - self.E.size))
            B_ = np.pad(self.B, (0,np.max([self.E.size, self.B.size]) - self.B.size))
            self.Bstar = E_ + B_
        
    ###########################################################################
    def get_tableau(self):
        """Return tableau.
        Returns:
        tableau (dict) : Butcher tableau as a dict.
        """
        
        tableau = {}
        tableau['A'] = self.A.copy()
        tableau['B'] = self.B.copy()
        tableau['C'] = self.C.copy()
        tableau['n_stages'] = self.n_stages
        
        # Optional values.
        tableau['Bstar'] = self.Bstar.copy()
        tableau['E'] = self.E.copy()
        tableau['P'] = self.P if hasattr(self, "P") else None # For dense output
        tableau['err_ex'] = self.err_ex
        tableau['order_B'] = self.order_B
        tableau['order_Bstar'] = self.order_Bstar

        return tableau
            
    ###########################################################################
    def plot(self):
        """Plot tableau."""
    
        plt.figure(1,(12,3))

        plt.subplot(131)
        plt.title('C')
        plt.plot(self.C, '.-')
        plt.xticks(np.arange(0, self.C.size))
        
        plt.subplot(132)
        plt.title('B')
        plt.plot(self.B, '.-', label='B')
        plt.plot(self.Bstar, '.-', label='B*')
        plt.legend()
        plt.xticks(np.arange(0, np.max([self.B.size, self.Bstar.size])))
        
        plt.subplot(133)
        plt.title('A')
        plt.imshow(self.A, origin='bottom')
        plt.colorbar()
        plt.xticks(np.arange(0, self.A.shape[0]))
        plt.yticks(np.arange(0, self.A.shape[0]))
        
        plt.show()
